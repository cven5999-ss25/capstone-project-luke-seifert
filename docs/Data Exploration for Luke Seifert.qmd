---
title: "First doc creation - data analysis"
author:
  - name: "Luke Seifert"
    orcid: "0009-0007-4689-8492"
    email: "luse8755@colorado.edu"
    affiliation:
      - name: "University of Colorado Boulder"
        department: "Department of Civil, Environmental and Architectural Engineering"
        city: "Boulder"
        state: "CO"
        country: "USA"
output:
  html_document:
    toc: true
    toc_depth: 2
    toc_float: true
date: today
execute: 
  warning: FALSE
format:
  html: 
    code-fold: true
    code-summary: "Show Code"
editor: visual
editor_options: 
  chunk_output_type: console
---

# Introduction

I am in Blantyre, Malawi, working with Water For People (WFP) - Malawi to collect data on their rural piped water schemes. WFP has built many piped water schemes for rural communities, either from scratch or by upgrading an existing handpump borehole. Once the scheme is handed over to the community, the community is responsible for keeping the system running, encouraging ownership and sustainability, but some schemes have been struggling to finance their own repairs.

I have been surveying these rural water scheme committees, collecting data on the costs they incur for keeping their water systems running and the monthly revenue they collect via tariffs. By comparing the costs and revenue generated by the schemes, I will aim to provide insight on the best practices in the rural water sector. The goal is to determine the gaps between costs and revenue, identify any trends between scheme management models and scheme success, and provide stakeholders with the results to encourage data-based decision making. Identifying these trends will help law makers and scheme committees to implement best practices going forward, encouraging sustainability of these rural schemes.

My raw data set consists quantitative data regarding costs of CapEx, CapManEx, and OpEx, quantitative data regarding tariff revenue generated, qualitative data regarding tariff collection methods, and qualitative data regarding scheme sustainability and productivity.

# Methods

## Reading the Data

```{r}

# Load packages
library(tidyverse)
library(dplyr)
library(readr)
library(ggplot2)
#library(ggrepel)


# Read data
raw_data <- read_csv(here::here("data/raw/WFP_data_cleaned_with_joseph_7_10.csv"))
```

## Data Exploration Approach

The survey used for data collection was designed by myself in partnership with WFP. Due to resource allocation and a language barrier between myself and the rural communities, we needed to rely on local government workers to collect the majority of this data. These workers are called "Water Monitoring Assistants", or "WMAs", and they oversee water access infrastructure in their respective rural areas.

WFP and myself hosted a training session with the WMAs to explain the purpose of this study and to teach them how to go about delivering this survey to the water scheme committees. Fuel was then provided to the WMAs by WFP and they were sent out to their respective areas.

## Initial Data Tidying

With myself being several degrees removed from the raw data we are collecting, many of the survey responses needed some cleaning up before I was able to start analyzing.

Initial data tidying outside of posit.cloud consisted heavily of fixing obvious data entry errors, addressing inconsistencies or questions left blank, and creating useful data out of response discrepancies.

Some questions were often skipped over or answered partially. Some of the data received was contradictory and needed follow-up outreach for clarification. Some responses were difficult to decipher due to the language barrier. Surveys with these issues were rejected and sent back to the corresponding WMA for re-submission, along with a direct follow-up with the WMA.

The resulting tidied data set was then uploaded to the data/raw folder for further data tidying and analysis.

# Results

## Initial Data Exploration

I started my initial data tidying within posit.cloud by refining my data set to be smaller and more user-friendly . @select-variables selects only the columns that I want to be working with. @rename-variables renames my variables, or columns, to names that will be easier to code with. @rename-schemes renames some of the schemes for cleaner looking outputs later on.

```{r}
#| label: select-variables

#Few initial functions I sometimes used to observe the data in posit.cloud

#head(raw_data)
#dim(raw_data)
#spec(raw_data)
#colnames(raw_data)

# Select only the desired columns
filtered_data <- raw_data |> 
  select(
    # General Info
    "What is your full name?",
    "District",
    "What is the name of the scheme you are currently visiting?",

    # Misc
    "How many total households does this scheme service? (HH)",
    "When was the scheme finished being built?...3",
    "How much total water can they hold? (liters)",
    "What is the average household monthly income in this village? (kwacha)",

    # CapManEx
    "ADDED: Total CapManEx costs (Kwacha)",

    # OpEx
    "ADDED: Are guards stationed at the scheme by the scheme committee?",
    "ADDED: If yes, how much are they paid in total? (kwacha)",
    "ADDED: Do they consistently use chlorine?",
    "ADDED: average monthly minor repair costs",
    "ADDED: Is the tank ever cleaned?",
    "ADDED: What additional monthly costs does the cleaning incur?",

    # Tariff Revenue
    "What percent of users regularly pay the tariffs? (%)",
    "ADDED: What percent can pay but don't want to?",
    "ADDED: What percent can't pay?",
    "How are tariffs collected?",
    "How many communal taps are there?",
    "ADDED: Communal tap monthly rate",
    "How many private household taps are there?",
    "ADDED: What is the monthly private household connection rate? (monthly kwacha)",
    "How many Public Institution taps are there? Ex) school or healthcare facility",
    "ADDED: Public Institution monthly contribution",
    "How much is currently in your bank account? (kwacha)",
    "How much do you have in cash? (kwacha)",

    # Concluding Questions
    "ADDED: Is the scheme able to finance its own repairs?",
    "ADDED: Do the tanks ever go empty?",
    "ADDED: Did the scheme committee mention the need for better community engagement or more trainings?"
  )

# Delete empty rows
filtered_data <- filtered_data[-c(25:35), ]

```

```{r}
#| label: rename-variables

# Save the original column names encase I want to view them later
collumns <- colnames(filtered_data)

# Rename columns for easier coding
filtered_data_renamed <- filtered_data |> 
  rename(name = "What is the name of the scheme you are currently visiting?",
         HH = "How many total households does this scheme service? (HH)",
         HH_monthly_income = "What is the average household monthly income in this village? (kwacha)",
         date_finished = "When was the scheme finished being built?...3", 
         water_volume = "How much total water can they hold? (liters)",
         CapManEx_cost = "ADDED: Total CapManEx costs (Kwacha)",
         guard = "ADDED: Are guards stationed at the scheme by the scheme committee?", 
         guard_mo_cost = "ADDED: If yes, how much are they paid in total? (kwacha)",
         cl = "ADDED: Do they consistently use chlorine?",
         tank_cleaned = "ADDED: Is the tank ever cleaned?",
         tank_cleaned_cost = "ADDED: What additional monthly costs does the cleaning incur?",
         per_reg_pay = "What percent of users regularly pay the tariffs? (%)",
         per_wont_pay = "ADDED: What percent can pay but don't want to?",
         per_cant_pay = "ADDED: What percent can't pay?",
         comm_taps = "How many communal taps are there?",
         comm_tap_rate = "ADDED: Communal tap monthly rate",
         HH_taps = "How many private household taps are there?",
         HH_tap_rate = "ADDED: What is the monthly private household connection rate? (monthly kwacha)",
         PI_taps = "How many Public Institution taps are there? Ex) school or healthcare facility",
         PI_mo_rate = "ADDED: Public Institution monthly contribution",
         bank_account = "How much is currently in your bank account? (kwacha)",
         cash = "How much do you have in cash? (kwacha)",
         finance_own_repairs = "ADDED: Is the scheme able to finance its own repairs?",
         tanks_empty = "ADDED: Do the tanks ever go empty?",
         want_trainings = "ADDED: Did the scheme committee mention the need for better community engagement or more trainings?",
         minor_repair_mo_cost = "ADDED: average monthly minor repair costs",
         )

# Save the renamed column names for ease of viewing as I move forward
collumns_renamed = colnames(filtered_data_renamed)

```

```{r}
#| label: rename-schemes

# Rename some of the schemes to make later outputs more visually appealing
filtered_data_renamed <- filtered_data_renamed %>%
  mutate(
    name = case_when(
      name == "Glasten scheme" ~ "Glasten (mega)",
      name == "Njuli water scheme" ~ "Njuli",
      name == "Kudziwa Scheme" ~ "Kudziwa",
      name == "Ndunde water scheme" ~ "Ndunde",
      name == "Malavi scheme" ~ "Malavi",
      name == "Chikopa scheme" ~ "Chikopa",
      name == "Muhasuwa water scheme" ~ "Muhasuwa",
      name == "Ndakwera community" ~ "Ndakwera",
      name == "Mwayi primary water scheme" ~ "Mwayi primary",
      name == "Mphatika Water system" ~ "Mphatika",
      name == "Tomali Primary School Scheme" ~ "Tomali Primary",
      name == "Mangulenje Water Scheme" ~ "Mangulenje",
      TRUE ~ name  # keep all other names unchanged
    )
  )

# Remove schemes that did not have adequate data
filtered_data_renamed <- filtered_data_renamed |> 
  filter(!name %in% c("Kudziwa", "Ntondeza 1", "Kakoma Health center"))

```

Now that I have isolated the data I want to work with, I need to make sure my variables are in the right format for analysis. @make-numerical changes my quantitative data into numerical variables.

```{r}
#| label: make-numerical

# Changing the necessary data into numerical for calculations
filtered_data_renamed <- filtered_data_renamed |> 
  mutate(across(
    c(HH, HH_monthly_income, water_volume, CapManEx_cost, guard_mo_cost, 
      per_reg_pay, per_wont_pay, per_cant_pay, comm_taps, comm_tap_rate, 
      HH_taps, HH_tap_rate, PI_mo_rate, bank_account, cash, minor_repair_mo_cost),
    as.numeric
  ))

```

Now the data is cleaned up and saved in the `filtered_data_renamed` object.

Next, I want to start my initial analysis by creating some of the variables I will be working with directly. @create-variables calculates total monthly CapManEx costs, total monthly OpEx costs, and total monthly revenue for each scheme.

```{r}
#| label: create-variables

## CAPMANEX ##
# Need to start by calc the total months that have passed since completion
library(lubridate)
filtered_data_renamed <- filtered_data_renamed |> 
  mutate(
    mo_since_built = interval(ymd(date_finished), today()) %/% months(1)
  )

# Now I want to calculate the monthly CapManEx costs
filtered_data_renamed <- filtered_data_renamed |> 
  mutate(
    CapManEx_mo_cost = CapManEx_cost / mo_since_built
  )


## OPEX ##
# First we need to create a new column for chlorine costs because most of the data on chlorine use was deemed not useable
filtered_data_renamed <- filtered_data_renamed |> 
  mutate(
    cl_mo_cost = if_else(cl %in% c("yes", "Yes"), 12500, NA_real_)
  )

# Now I want to calc total monthly OpEx costs by adding the cost of the guards, minor repairs, and chlorine
filtered_data_renamed <- filtered_data_renamed |> 
  mutate(
    OpEx_mo_cost = rowSums(across(c(guard_mo_cost, minor_repair_mo_cost, cl_mo_cost)), na.rm = TRUE)
  )


## TOTAL COST ##
# Now I want to add CapManEx and OpEx to get the total monthly cost
filtered_data_renamed <- filtered_data_renamed |> 
  mutate(
    total_mo_cost = rowSums(across(c(CapManEx_mo_cost, OpEx_mo_cost)), na.rm = TRUE)
  )


## TARIFF COLLECTION ##
# Calc revenue collected by communal taps
filtered_data_renamed <- filtered_data_renamed |> 
  mutate(
    comm_mo_tariff = HH * per_reg_pay / 100 * comm_tap_rate
  )

# Calc revenue collected by household private taps
filtered_data_renamed <- filtered_data_renamed |> 
  mutate(
    HH_mo_tariff = HH_taps * HH_tap_rate
  )

# Add up communal, private household, and Public Institution incomes for total monthly income
filtered_data_renamed <- filtered_data_renamed |> 
  mutate(
    total_mo_tariff = rowSums(across(c(comm_mo_tariff, HH_mo_tariff, PI_mo_rate)), na.rm = TRUE)
  )

```

Now that I have some variables to work with, I will analyzing my data. First, I want to output a table @tbl-SchemeInfo highlighting the key features of each scheme.

```{r}

library(gt)

# Select relevant columns
table_for_show <- filtered_data_renamed |> 
  select(
    District, name, tank_cleaned, guard, comm_taps, HH_taps, PI_taps,
    per_reg_pay, tanks_empty, total_mo_cost, total_mo_tariff,
    CapManEx_mo_cost, OpEx_mo_cost
  )

```

```{r}
#| label: tbl-SchemeInfo
#| tbl-cap: Table showing the main data that will be assessed for each scheme

# All Scheme table
table_for_show |> 
  gt() |> 
  tab_header(title = "All Scheme Data") |> 
  fmt_number(columns = where(is.numeric), decimals = 1)

```

Now that we have a table showing the key data for each scheme, I want to show an overview of the numerical data. @tbl-num_avgs shows the mean and standard deviation for the total monthly CapManEx costs, total monthly OpEx costs, total monthly costs, and total monthly tariffs (total_mo_cost, total_mo_tariff, CapManEx_mo_cost, and OpEx_mo_cost).

```{r}
#| label: tbl-num_avgs
#| tbl-cap: Table showing the mean and SD of the main data that will be assessed for each scheme


# Select variables to show the mean and SD of
summary_table <- filtered_data_renamed |>
  summarise(
    across(
      c(per_reg_pay, total_mo_cost, total_mo_tariff, CapManEx_mo_cost, OpEx_mo_cost),
      .fns = list(
        Mean = ~mean(.x, na.rm = TRUE),
        SD = ~sd(.x, na.rm = TRUE)
      ),
      .names = "{.col}_{.fn}"
    )
  )

# Convert the wide-format summary into a long, readable format:
summary_long <- summary_table |> 
  pivot_longer(
    cols = everything(),
    names_to = c("Variable", "Statistic"),
    names_pattern = "^(.*)_(Mean|SD)$",
    values_to = "Value"
  ) |> 
  pivot_wider(
    names_from = Statistic,
    values_from = Value
  )

# All Scheme table
summary_long |> 
  gt() |> 
  tab_header(title = "Mean and SD for numerical data") |> 
  fmt_number(columns = where(is.numeric), decimals = 1)

```

#####add something about what this means

Now I will start my initial data visualizations. I want a visualization of how the cost and revenue of each scheme compares to assess how the schemes are performing. @fig-Cost-vs-Revenue shows how much monthly costs each scheme incurs *on average* in red, and how much monthly revenue it is collecting *on average* in green.

```{r}
#| label: fig-Cost-vs-Revenue
#| fig-cap: Figure showing the costs vs. revenue incurred by each scheme

# Reshape data to long format
plot_data <- filtered_data_renamed |> 
  select(name, total_mo_cost, total_mo_tariff) |> 
  pivot_longer(cols = c(total_mo_cost, total_mo_tariff),
               names_to = "type",
               values_to = "kwacha")

# Create the double bar graph
ggplot(plot_data, aes(x = name, y = kwacha, fill = type)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_manual(values = c(
    "total_mo_cost" = "red",
    "total_mo_tariff" = "green"
  )) +
  labs(title = "Cost and Revenue of Each Scheme",
       x = "Scheme Name",
       y = "Kwacha (Currency of Malawi)",
       fill = "Legend") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

```

#####add something about what this means

Now I want to calculate how much money each scheme is making or losing each month by subtracting costs from revenue and plotting it in a colored bar graph. @fig-Monthly-Surplus-or-Deficit shows schemes' monthly net revenue, in order or losing the most to making the most. Schemes in the negative are plotted in red, and schemes in the positive are plotted in green.

```{r}
#| label: fig-Monthly-Surplus-or-Deficit
#| fig-cap: Figure showing the net revenue incurred by each scheme

# Find info on monthly money
filtered_data_renamed <- filtered_data_renamed |> 
  mutate(mo_avg = total_mo_tariff - total_mo_cost)

# Create a new column to label profit/loss
filtered_data_renamed <- filtered_data_renamed |> 
  mutate(status = if_else(mo_avg >= 0, "Profit", "Loss"))

# Plot
ggplot(filtered_data_renamed, aes(x = reorder(name, mo_avg), y = mo_avg, fill = status)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = c("Profit" = "green", "Loss" = "red")) +
  labs(
    title = "Monthly Surplus or Deficit by Scheme",
    x = "Scheme",
    y = "Monthly Average (Kwacha)",
    fill = "Status"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

```

Here we can see that overall, the majority of the schemes are collecting more revenue than the costs they incur, meaning that the majority of them have been able to finance their own OpEx and CapManEx thus far.

Now I want to plot this in order of households served to see if there is a correlation between households served and scheme success. @fig-net-profit-vs-HH plots the schemes in order on increasing households served on the x-axis, and their net profit on the y-axis.

```{r}
#| label: fig-net-profit-vs-HH
#| fig-cap: Figure showing the revenue - costs incurred by each scheme in order of HH served

# Arrange by HH to control order on x-axis
filtered_data_renamed_ordered <- filtered_data_renamed |> 
  arrange(HH) |> 
  mutate(name = factor(name, levels = name))  # Keep the order

# Plot with scheme names on x-axis
ggplot(filtered_data_renamed_ordered, aes(x = name, y = mo_avg)) +
  geom_line(group = 1, color = "blue", size = 1) +
  geom_point(aes(color = mo_avg >= 0), size = 3) +
  scale_color_manual(values = c("TRUE" = "green", "FALSE" = "red"), labels = c("Loss", "Profit")) +
  labs(
    title = "Monthly Surplus or Deficit in order of HH served",
    x = "Scheme (ordered by HH served)",
    y = "Monthly Average (Kwacha)",
    color = "Status"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
```

@fig-net-profit-vs-HH shows that there is a trend between serving more households and schemes making more net monthly money.

Now I want to calculate the average monthly rates based on if they use a guard or not. @tbl-guard-avg calculates the average net profit of all the schemes grouped by if they use a guard or not.

```{r}
#|label: tbl-guard-avg

# Create a binary guard usage column
guard_avg <- filtered_data_renamed |> 
  mutate(guard_used = if_else(tolower(guard) == "yes", "Uses Guard", "No Guard")) |> 
  group_by(guard_used) |> 
  summarise(
    avg_mo_avg = mean(mo_avg, na.rm = TRUE),
    .groups = "drop"
  )

print(guard_avg)
```

@tbl-guard-avg shows that schemes that do not use a guard often have higher net monthly profits.

Now I want to do the same calculation excluding the Ndakwera and Mangulenje schemes because they are somewhat of outliers. @tbl-guard-avg-filtered does the same calculation as before, but excludes the highest grossing schemes.

```{r}
#| label: tbl-guard-avg-filtered

guard_avg_filtered <- filtered_data_renamed |> 
  # Step 1: Exclude Ndakwera and Mangulenje
  filter(!name %in% c("Ndakwera", "Mangulenje")) |> 
  
  # Step 2: Create a clean guard usage label
  mutate(guard_used = if_else(tolower(guard) == "yes", "Uses Guard", "No Guard")) |> 
  
  # Step 3: Group and calculate average mo_avg
  group_by(guard_used) |> 
  summarise(
    avg_mo_avg = mean(mo_avg, na.rm = TRUE),
    .groups = "drop"
  )

print(guard_avg_filtered)
```

Here we see that @tbl-guard-avg-filtered still shows that schemes that do not use a guard often have higher net monthly profits. This is likely because guards are paid 30-50000 kwacha, often being the largest OpEx cost for the schemes.

------------------------------------------------------------------------

\[This will be the core of your analysis with specific requirements\]

# Conclusions

## Summary of Findings

## Questions and Next Steps
